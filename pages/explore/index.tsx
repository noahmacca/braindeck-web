import _ from 'lodash';
import NavBar from "../../components/NavBar";
import PageHead from "../../components/PageHead";
import LpListSection from "../../components/LpListSection";
import SubjectListSection from "../../components/SubjectListSection";
import { getLearningPathData } from '../../lib/learningPaths';
import { getUserData } from '../../lib/user';
const NUM_TOP_SUBJECTS = 2;
const NUM_REMAINING_SUBJECTS = 9;

function compareMaxComplete( a, b ) {
    if ( a.maxComplete < b.maxComplete ){
      return 1;
    }
    if ( a.maxComplete > b.maxComplete ){
      return -1;
    }
    return 0;
  }
  

function mapSubToLps(lps) {
    const s = {};
    lps.forEach((lp) => {
        const subjectId = lp.data.subject.id;
        if (!(subjectId in s)) {
            s[subjectId] = {
                maxComplete: 0,
                lps: [],
                ...lp.data.subject
            }
        }
        s[subjectId].maxComplete = Math.max(lp.data.countComplete, s[subjectId].maxComplete);
        s[subjectId].lps.push(lp);
    });
    const sArr = Object.keys(s).map(key => s[key]); // TS prefers this way
    sArr.sort(compareMaxComplete);

    return sArr
}

export async function getStaticProps() {
    const learningPaths = getLearningPathData();
    const users = getUserData();
    const subLpList = mapSubToLps(learningPaths);
    return {
        props: {
            subLpList,
            users
        }
    }
}



export default function Explore({ subLpList, users }) {
    // Page layout
    // Search (eventually)
    // Filters (by length, difficulty, modality)

    // Sections (Dynamically generated by popularity)
    // Popular (Overall)
    // Section 1
    // Section 2
    // Section
    // More sections (SubjectList)

    const topSubjectLps = subLpList.slice(0,NUM_TOP_SUBJECTS);
    const remainingSubjects = subLpList.slice(NUM_TOP_SUBJECTS,NUM_TOP_SUBJECTS + NUM_REMAINING_SUBJECTS)

    return (
        <div>
            <PageHead title="BrainDeck Explore" />
            <NavBar />
            <div className="relative bg-white overflow-hidden">
                <div className="mx-auto px-6 mt-6 max-w-4xl">
                    <div className="container mb-6 md:mb-10">
                        <h1>Top</h1>
                        {
                            topSubjectLps.map((sLp) => (
                                <LpListSection
                                    key={`${sLp.id}`}
                                    title={sLp.name}
                                    lps={sLp.lps}
                                    userData={users[0].data}
                                />
                            ))
                        }
                    </div>
                    <div className="container mb-2">
                        <h1>All Subjects</h1>
                        <SubjectListSection
                            sLps={remainingSubjects}
                        />
                    </div>
                </div>
            </div>
        </div>
    )
}